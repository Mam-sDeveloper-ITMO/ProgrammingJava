@startuml Classes Model

' ' package enums {
    enum Color {}
    enum Gender {}
    enum Property {
        + int value
    }
' }

interface Comparable

' ' package interfaces {
    interface Breathable {
        + onBreath(Creature actor)
    }

    interface Hugable {
        + onHug(Creature actor)
    }

    interface Patterned {
        + Pattern getPattern()
    }

    interface Positioned {
        + Coordinates getPosition()
    }

    interface Mooveable extends Positioned {
        + move(Coordinated position)
        + offset(Coordinated offset)
    }

' }

' package abc {
    PropertiesContainer -- Property
    abstract class PropertiesContainer extends Comparable {
        + HashSet<Property> getProperties()
        + boolean hasProperty(Property property)
        + int getPropertiesValue()
        + int compareTo(PropertiesContainer other)

        + toString()
        + equals()
        + hashCode()
    }    

    abstract class Creature extends PropertiesContainer implements Positioned, Hugable {
        # Body body
        # int health
        # int age

        + Creature(Body body, int health, int age)

        + abstract hart()
        + abstract heal()
        + abstract Sight see(Positioned target)
        + breath(Breathable source)

        + Coordinates getPosition()

        + toString()
        + equals()
        + hashCode()
    }

    abstract class Thing extends PropertiesContainer implements Positioned, Hugable {
        # HashSet<Property> properties
        # Creature owner
        # Coordinates position

        + Thing(Coordinates position, Property... properties)

        + abstract interact(Creature actor)

        + Creature getOwner()
        + setOwner(Creature owner)

        + HashSet<Property>  getProperties()
        + Coordinates getPosition()
        + move(Coordinates coords)
        + offset(Coordinates coords)

        + toString()
        + equals()
        + hashCode()
    }

    Human -- Gender
    abstract class Human extends Creature {
        # String name
        # Gender gender
        # HashSet<Property> personality

        + Human(Body body, int health, int age, String name, Gender gender, Property... personality)

        + abstract String say()
        + abstract listen(String info)
        + abstract boolean trust(Object target)

        + hug(Hugable other) 
        + HashSet<Property> getAppearance()
        + HashSet<Property> getPersonality()
        + addPersonality(Property personality)

        + HashSet<Property> getProperties()

        + toString()
        + equals()
        + hashCode()
    }

    abstract class Animal extends Creature implements Patterned {
        # Pattern skin

        + Animal(Body body, int health, int age, Pattern skin)

        + Pattern getPattern()

        + HashSet<Property> getProperties()
        + compareTo(PropertiesContainer other)

        + toString()
        + equals()
        + hashCode()
    }

    abstract BodyPart extends PropertiesContainer implements Hugable{
        # HashSet<Property> properties;    

        + BodyPart(Property... properties)

        + HashSet<Property> getProperties()
        + void onHug(Creature actor)

        + toString()
    }
' }

' package classes {
    ' package bodyparts {
        class Head extends BodyPart {}
        class Hand extends BodyPart {}
        class Leg extends BodyPart {}
        class Neck extends BodyPart {}
        class Tail extends BodyPart {}
        class Torso extends BodyPart {}
    ' }

    class Body extends Thing {
        # Creature owner;
        # BodyPart[] bodyParts;
        
        + Body(Coordinates position, BodyPart... bodyParts)

        + void onHug(Creature actor)
        + void interact(Creature actor)
        + HashSet<Property> getProperties()

        + toString()
        + equals()
        + hashCode()
    }

    class Fog implements Breathable {
        + toString()
    }
    class Oxygen implements Breathable {
        +  toString()
    }

    class Narrator extends Human {
        # HashSet<String> stories = new HashSet<String>()

        + Narrator(Body body, int health, int age, String name, Gender gender, Property... personality)
        
        + walk()
        + String say()
        + listen(String info)
        + Sight see(Positioned target)
        + boolean trust(Object target)
        + breath(Breathable source)
        + onHug(Creature actor)
        + hurt(int damage)
        + heal(int amount)
    }

    class SadGirl extends Human {
        # HashSet<String> reasonsToDie = new HashSet<String>()
        
        + SadGirl(Body body, int health, int age, String name, Property... personality)

        + cry()
        + String say()
        + listen(String info)
        + Sight see(Positioned target)
        + boolean trust(Object target)
        + breath(Breathable source)
        + onHug(Creature actor)
        + hurt(int damage)
        + heal(int amount)
    }

    class Giraffe extends Animal {
            public Giraffe(Body body, int health, int age, Pattern skin) {

            + walk() 
            + hide(Positioned obstacle) 
            
            + onHug(Creature actor) 
            + hurt(int damage) 
            + heal(int amount) 
            + breath(Breathable source)
            + Sight see(Positioned target) 
    }

    class Bird extends Animal {
        + Bird(Body body, int health, int age, Pattern pattern, HashSet<Property> properties)

        + fly()
        + onHug(Creature actor) 
        + hurt(int damage) 
        + heal(int amount) 
        + breath(Breathable source)
        + Sight see(Positioned target) 
    }

    class Rain extends PropertiesContainer {
        # HashSet<Property> properties

        + HashSet<Property> getProperties()
    }

    class Sight extends PropertiesContainer {
        + final Positioned target;
        # HashSet<Property> properties;

        + Sight(Positioned target, Property... properties)

        + HashSet<Property> getProperties()

        + toString()
        + equals()
        + hashCode()
    }

    class Moon extends PropertiesContainer implements Patterned {    
        - Pattern surface = new Pattern(Color.GRAY, Property.GREAT);

        + void splitAndSwing() {

        + Pattern getPattern() {
        + HashSet<Property> getProperties()
        
        + toString()
        + equals()
        + hashCode()
    }

    class ShipSails extends PropertiesContainer {
        # HashSet<Property> properties = new HashSet<Property>();
        
        + ShipSails(Property... properties) 
        + HashSet<Property> getProperties() 
    }

    class Cave implements Positioned {
        # Coordinates position  

        + Cave(Coordinates position)

        + Coordinates getPosition() 

        + toString()
        + equals()
        + hashCode()

        
    }

    class Coordinates {
        + int x
        + int y
        + int z

        + Coordinates(int x, int y, int z)
        
        + Coordinates byOffset(Coordinates offset)

        + toString()
        + equals()
        + hashCode()
    }
' }

@enduml