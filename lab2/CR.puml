@startuml Classes Model

class Pattern implements Comparable {
    + colorfulnesss
    + complexity
}

class Body implements Positioned {
    # skin
    # parts

    + getProperties()
    + getSkin()
    + setPosition()
}

Body o-- BodyPart
class BodyPart {
    # size
    # properties
}

BodyPart o-- Appearance
enum Appearance {}

class Head extends BodyPart {}
class Torso extends BodyPart {}
class Hand extends BodyPart {}
class Leg extends BodyPart {}
class Tail extends BodyPart {}
class Neck extends BodyPart {}

interface Positioned {
    + getPosition()
}
Positioned -- IncorrectPosition
class IncorrectPosition extends Exception {}

Positioned -- Point
class Point {
    + x
    + y
    + z
}

interface Seeable {
    + see()
}

Seeable -- Sight
class Sight {
    + target
    + description
}

abstract Animal implements Positioned, Seeable {
    # body
    # age
    # health

    # buildBody()
    # moveBody()
    + breath()
    + die()
    + getAppearance()
    + getAge()
    + getSkinPattern()
    + getHealth()
    + getBody()
}


Animal -- DeadInterraction
class DeadInterraction extends RuntimeException {}

Animal -- BreathSource
enum BreathSource {
    FOG
    OXYGEN
    CARBON_HYDROXIDE
}

interface Walkable {
    + walk()
}

interface Runable {
    + run()
}

interface Flyable {
    + fly()
}

interface Swimable {
    + swim()
}

class Giraffe extends Animal implements Runable, Walkable {
    + hide()
}
Giraffe -- GiraffeBody
class GiraffeBody extends Body {}

class Lion extends Animal implements Runable, Walkable, Killer {}
Lion -- LionBody
class LionBody extends Body {}

class Bird extends Animal implements Walkable, Flyable {}
Bird -- BirdBody
class BirdBody extends Body {}

class Fish extends Animal implements Swimable {}
Fish -- FishBody
class FishBody extends Body {}

abstract Human extends Animal implements Walkable {

    # name
    # gender
    # personality
    # knowledge

    + say()
    + listen()
    + trust()
    + hug()
    + getPersonality()
}

Human -- Gender
enum Gender {}

Human o-- Personality
enum Personality {}

interface Narrator {
    + tellStory()
    + learnStory()
}

interface SadGirl {
    + cry()
}
SadGirl -- NoReasonsToDie
class NoReasonsToDie extends RuntimeException {}

interface Killer {
    + kill()
}

interface Thief {
    + rob()
}

abstract class Giant extends Human {}
Giant -- GiantBody
class GiantBody extends Body {}

abstract class Dwarf extends Human {}
Dwarf -- DwarfBody
class DwarfBody extends Body {}

class Gumilov extends Human implements Narrator {}
Gumilov -- GumilovBody
class GumilovBody extends Body {}

class Ahmatova extends Human implements SadGirl {}
Ahmatova -- AhmatovaBody
class AhmatovaBody extends Body {}

class BlackMaiden extends Human {}
BlackMaiden -- BlackMaidenBody
class BlackMaidenBody  extends Body {}

class YoungKing extends Human {}
YoungKing -- YoungKingBody
class YoungKingBody extends Body {}


class NekoWoman extends Human {
    + sigh()
    + moan()
}
NekoWoman -- NekoWomanBody
class NekoWomanBody extends Body {}

abstract class Bandit extends Human implements Thief, Killer {}

interface Peer {
    + vote()
}

abstract class UKPeer extends Human implements Peer {
    # lands

    + getLands()
}

abstract class FranchPeer extends Human implements Peer {
    # knownKing

    + getKnownKing()
}


interface Monk {
    + getCommunion()
}

abstract class Cure extends Human implements Monk {}


interface Fisher {
    + fishing()
}

abstract class FisherMan extends Human implements Fisher {}

abstract Location implements Positioned {
    # name
    # center
    # radius

    + checkConsist()
}



class Earth extends Location implements Seeable {}
class Moon extends Location {
    # surface

    + split()
    + wobble()
    + getSurface()
}
class MythicCountry extends Location {
    # stories
    + getStories()
}
class House extends Location {}
class Cave extends Location {}
class Lake extends Location {}
class TropicalGarden extends Location {
    # plants
    + getPlants()
}
class MagicForest extends Location {
    # Trees
    + getTrees()
}

abstract Plant implements Positioned {
    + photosynthesis()
}
class Palm extends Plant {}
class Grass extends Plant {}
class Root extends Plant implements Walkable {}
class WhiteTree extends Plant {
    - root
}

class ShipSails implements Positioned {
    # pattern

    + getPattern
}


class Rain implements Walkable {}

@enduml